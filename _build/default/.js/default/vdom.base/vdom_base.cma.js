// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.4.0

//# unitInfo: Provides: Vdom
//# unitInfo: Requires: CamlinternalLazy, Stdlib, Stdlib__Buffer, Stdlib__Lazy, Stdlib__List, Stdlib__Printf, Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$5 = "",
    cst_altKey$1 = "altKey",
    cst_autofocus$2 = "autofocus",
    cst_change$1 = "change",
    cst_className$1 = "className",
    cst_click$2 = "click",
    cst_ctrlKey$1 = "ctrlKey",
    cst_currentTarget$2 = "currentTarget",
    cst_input$1 = "input",
    cst_keydown$1 = "keydown",
    cst_keyup$1 = "keyup",
    cst_mousedown$1 = "mousedown",
    cst_shiftKey$1 = "shiftKey",
    cst_target$1 = "target",
    cst_target_value$1 = "target.value",
    caml_equal = runtime.caml_equal,
    caml_fresh_oo_id = runtime.caml_fresh_oo_id,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_get = runtime.caml_string_get,
    caml_string_notequal = runtime.caml_string_notequal;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    x = "&quote;",
    cst$0 = ":",
    cst$1 = ";",
    cst$2 = " ",
    cst$3 = "/>",
    cst$4 = "<\/",
    cst = cst$5,
    svg_ns = "http://www.w3.org/2000/svg",
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib = global_data.Stdlib,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_String = global_data.Stdlib__String,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Stdlib_Lazy = global_data.Stdlib__Lazy,
    Echo = [248, "Vdom.Cmd.Echo", caml_fresh_oo_id(0)],
    Batch = [248, "Vdom.Cmd.Batch", caml_fresh_oo_id(0)],
    Bind = [248, "Vdom.Cmd.Bind", caml_fresh_oo_id(0)],
    Map = [248, "Vdom.Cmd.Map", caml_fresh_oo_id(0)],
    _i_ = [0, [2, 0, [11, '="', [2, 0, [12, 34, 0]]]], '%s="%s"'],
    cst_class = "class",
    _h_ = [0, 0, 0],
    cst_style = "style",
    cst_xmlns = "xmlns",
    cst_custom = "_custom",
    _g_ = [0, 0],
    cst_memo = "_memo",
    cst_map = "_map",
    cst_span = "span",
    cst_input$0 = cst_input$1,
    cst_div = "div",
    cst_fragment = "_fragment",
    cst_txt = "_txt",
    _f_ = [0, [2, 0, [12, 32, [2, 0, 0]]], "%s %s"],
    cst_className$0 = cst_className$1,
    cst_disabled = "disabled",
    cst_value = "value",
    cst_type = "type",
    cst_className = cst_className$1,
    cst_autofocus$0 = cst_autofocus$2,
    cst_scroll_to_show = "scroll-to-show",
    cst_paste = "paste",
    cst_keyup$0 = cst_keyup$1,
    cst_keyup = cst_keyup$1,
    cst_keydown$0 = cst_keydown$1,
    cst_keydown = cst_keydown$1,
    cst_target_checked = "target.checked",
    cst_click$1 = cst_click$2,
    cst_target_selectedIndex = "target.selectedIndex",
    cst_change$0 = cst_change$1,
    cst_target_value$0 = cst_target_value$1,
    cst_change = cst_change$1,
    cst_target_value = cst_target_value$1,
    cst_input = cst_input$1,
    cst_blur = "blur",
    cst_focus = "focus",
    cst_mouseover = "mouseover",
    cst_target$0 = cst_target$1,
    cst_currentTarget$1 = cst_currentTarget$2,
    cst_mouseleave = "mouseleave",
    cst_target = cst_target$1,
    cst_currentTarget$0 = cst_currentTarget$2,
    cst_mouseenter = "mouseenter",
    cst_mousemove = "mousemove",
    cst_contextmenu = "contextmenu",
    _e_ = [0, 0],
    cst_dblclick = "dblclick",
    cst_click$0 = cst_click$2,
    cst_click = cst_click$2,
    cst_mouseup = "mouseup",
    cst_mousedown$0 = cst_mousedown$1,
    cst_mousedown = cst_mousedown$1,
    cst_left = "left",
    cst_top = "top",
    cst_getBoundingClientRect = "getBoundingClientRect",
    cst_currentTarget = cst_currentTarget$2,
    cst_clientX = "clientX",
    cst_clientY = "clientY",
    cst_pageX = "pageX",
    cst_pageY = "pageY",
    cst_buttons = "buttons",
    cst_altKey = cst_altKey$1,
    cst_ctrlKey = cst_ctrlKey$1,
    cst_shiftKey = cst_shiftKey$1,
    cst_which = "which",
    cst_altKey$0 = cst_altKey$1,
    cst_ctrlKey$0 = cst_ctrlKey$1,
    cst_shiftKey$0 = cst_shiftKey$1,
    _d_ = [0, [0, "text"], 0],
    cst_getData = "getData",
    cst_clipboardData = "clipboardData",
    cst_currentTarget_selectionSta = "currentTarget.selectionStart",
    cst_currentTarget_selectionEnd = "currentTarget.selectionEnd",
    cst_autofocus = cst_autofocus$2,
    cst_if_visible = "if-visible",
    cst_autofocus$1 = cst_autofocus$2,
    cst_autosubmit = "autosubmit",
    cst_select = "select",
    cst_button = "button";
   function echo(msg){return [0, Echo, msg];}
   function batch(l){return [0, Batch, l];}
   function map(f, x){return [0, Map, f, x];}
   function bind(x, f){return [0, Bind, x, f];}
   var
    Cmd = [0, Echo, Batch, Bind, Map, echo, batch, map, bind],
    Custom = [0];
   function field(key, d){return [0, key, d];}
   function method(name, arg, d){return [1, name, arg, d];}
   function bind$0(f, d){return [2, f, d];}
   function let$0(d, f){return [2, f, d];}
   function const$0(msg){return [3, msg];}
   function factor(f){return [4, f];}
   function map$0(f, d){
    return [2, function(msg){return [3, caml_call1(f, msg)];}, d];
   }
   function let$1(d, f){return map$0(f, d);}
   function pair(d1, d2){
    return [2,
            function(x1){return let$1(d2, function(x2){return [0, x1, x2];});},
            d1];
   }
   function app(f, d){return [2, function(ff){return map$0(ff, d);}, f];}
   function map2(f, d1, d2){
    return [2,
            function(x1){
             return let$1(d2, function(x2){return caml_call2(f, x1, x2);});
            },
            d1];
   }
   function map_some(f){
    function _P_(x){return [0, caml_call1(f, x)];}
    return function(_Q_){return map$0(_P_, _Q_);};
   }
   var
    unit = [3, 0],
    string = 0,
    int$0 = 1,
    float$0 = 2,
    bool = 3,
    object = 4;
   function list(d){return [5, d];}
   function fail(error){return [6, error];}
   function try$0(d){return [7, d];}
   var left = [0, cst_clientX, float$0];
   function _a_(param){
    var
     shift_key = param[2],
     _I_ = param[1],
     ctrl_key = _I_[2],
     _J_ = _I_[1],
     alt_key = _J_[2],
     _K_ = _J_[1],
     buttons = _K_[2],
     _L_ = _K_[1],
     page_y = _L_[2],
     _M_ = _L_[1],
     page_x = _M_[2],
     _N_ = _M_[1],
     left_top = _N_[2],
     match = _N_[1],
     y = match[2],
     x = match[1],
     left_top$0 = caml_call1(Stdlib_Lazy[6], left_top);
    function get(x){
     var
      _O_ = runtime.caml_obj_tag(x),
      match =
        250 === _O_
         ? x[1]
         : 246 === _O_ ? caml_call1(CamlinternalLazy[2], x) : x;
     if(0 === match[0]){var x$0 = match[1]; return x$0;}
     var err = match[1];
     return caml_call1(Stdlib[2], err);
    }
    var
     element_x = [246, function(param){return x - get(left_top$0)[1];}],
     element_y = [246, function(param){return y - get(left_top$0)[2];}];
    return [0,
            x,
            y,
            page_x,
            page_y,
            element_x,
            element_y,
            buttons,
            alt_key,
            ctrl_key,
            shift_key];
   }
   var
    left$0 = pair(left, [0, cst_clientY, float$0]),
    left$1 =
      pair
       (left$0,
        [4,
         function(param){
          var left = [0, cst_left, float$0];
          function _H_(param){
           var top = param[2], left = param[1];
           return [0, left, top];
          }
          return [0,
                  cst_currentTarget,
                  [1,
                   cst_getBoundingClientRect,
                   0,
                   let$1(pair(left, [0, cst_top, float$0]), _H_)]];
         }]),
    left$2 = pair(left$1, [0, cst_pageX, float$0]),
    left$3 = pair(left$2, [0, cst_pageY, float$0]),
    left$4 = pair(left$3, [0, cst_buttons, int$0]),
    left$5 = pair(left$4, [0, cst_altKey, bool]),
    left$6 = pair(left$5, [0, cst_ctrlKey, bool]),
    mouse_event = let$1(pair(left$6, [0, cst_shiftKey, bool]), _a_),
    left$7 = [0, cst_which, int$0];
   function _b_(param){
    var
     shift_key = param[2],
     _G_ = param[1],
     ctrl_key = _G_[2],
     match = _G_[1],
     alt_key = match[2],
     which = match[1];
    return [0, which, alt_key, ctrl_key, shift_key];
   }
   var
    left$8 = pair(left$7, [0, cst_altKey$0, bool]),
    left$9 = pair(left$8, [0, cst_ctrlKey$0, bool]),
    key_event = let$1(pair(left$9, [0, cst_shiftKey$0, bool]), _b_),
    left$11 = [0, cst_clipboardData, [1, cst_getData, _d_, string]];
   function _c_(param){
    var
     selection_end = param[2],
     match = param[1],
     selection_start = match[2],
     text = match[1];
    return [0, text, selection_start, selection_end];
   }
   var
    left$10 = pair(left$11, [0, cst_currentTarget_selectionSta, int$0]),
    paste_event =
      let$1(pair(left$10, [0, cst_currentTarget_selectionEnd, int$0]), _c_);
   function on_with_options(event_type, decoder){
    return [2, [0, event_type, decoder, function(_F_){return _F_;}]];
   }
   function on(prevent_default, stop_propagation, event_type, decoder){
    var
     prevent_default$0 = prevent_default ? 1 : 0,
     stop_propagation$0 = stop_propagation ? 1 : 0;
    return on_with_options
            (event_type,
             let$1
              (decoder,
               function(msg){
                return [0, msg, stop_propagation$0, prevent_default$0];
               }));
   }
   function on_cancel(stop_propagation, event_type, decoder){
    var stop_propagation$0 = stop_propagation ? 1 : 0;
    return on_with_options
            (event_type,
             let$1
              (decoder,
               function(msg){
                return msg
                        ? [0, msg, stop_propagation$0, 1]
                        : [0, msg, stop_propagation$0, 0];
               }));
   }
   function on_js_with_options(event_type, handler){
    return on_with_options
            (event_type,
             let$1(object, function(o){return caml_call1(handler, o);}));
   }
   function on_js(prevent_default, stop_propagation, event_type, handler){
    var
     prevent_default$0 = prevent_default ? 1 : 0,
     stop_propagation$0 = stop_propagation ? 1 : 0;
    return on_js_with_options
            (event_type,
             function(e){
              return [0,
                      caml_call1(handler, e),
                      stop_propagation$0,
                      prevent_default$0];
             });
   }
   function onmouseevent(prevent_default, stop_propagation, type, msg){
    return on
            (prevent_default,
             stop_propagation,
             type,
             map_some(msg)(mouse_event));
   }
   function onmouseevent_cancel(stop_propagation, type, msg){
    return on_cancel(stop_propagation, type, map$0(msg, mouse_event));
   }
   function onmousedown(prevent_default, stop_propagation, msg){
    return onmouseevent(prevent_default, stop_propagation, cst_mousedown, msg);
   }
   function onmousedown_cancel(stop_propagation, msg){
    return onmouseevent_cancel(stop_propagation, cst_mousedown$0, msg);
   }
   function onmouseup(prevent_default, stop_propagation, msg){
    return onmouseevent(prevent_default, stop_propagation, cst_mouseup, msg);
   }
   function onclick(prevent_default, stop_propagation, msg){
    return onmouseevent(prevent_default, stop_propagation, cst_click, msg);
   }
   function onclick_cancel(stop_propagation, msg){
    return onmouseevent_cancel(stop_propagation, cst_click$0, msg);
   }
   function ondblclick(prevent_default, stop_propagation, msg){
    return onmouseevent(prevent_default, stop_propagation, cst_dblclick, msg);
   }
   function oncontextmenu(stop_propagation, msg){
    return onmouseevent(_e_, stop_propagation, cst_contextmenu, msg);
   }
   function onmousemove(prevent_default, stop_propagation, msg){
    return onmouseevent(prevent_default, stop_propagation, cst_mousemove, msg);
   }
   function onmouseenter(prevent_default, stop_propagation, msg){
    var left = [0, cst_target, object];
    function _E_(param){
     var current_target = param[2], target = param[1];
     return caml_equal(target, current_target)
             ? map_some(msg)(mouse_event)
             : [3, 0];
    }
    return on
            (prevent_default,
             stop_propagation,
             cst_mouseenter,
             [2, _E_, pair(left, [0, cst_currentTarget$0, object])]);
   }
   function onmouseleave(prevent_default, stop_propagation, msg){
    var left = [0, cst_target$0, object];
    function _D_(param){
     var current_target = param[2], target = param[1];
     return caml_equal(target, current_target)
             ? map_some(msg)(mouse_event)
             : [3, 0];
    }
    return on
            (prevent_default,
             stop_propagation,
             cst_mouseleave,
             [2, _D_, pair(left, [0, cst_currentTarget$1, object])]);
   }
   function onmouseover(prevent_default, stop_propagation, msg){
    return onmouseevent(prevent_default, stop_propagation, cst_mouseover, msg);
   }
   function onfocus(prevent_default, stop_propagation, msg){
    return on(prevent_default, stop_propagation, cst_focus, [3, [0, msg]]);
   }
   function onblur(prevent_default, stop_propagation, msg){
    return on(prevent_default, stop_propagation, cst_blur, [3, [0, msg]]);
   }
   function oninput(prevent_default, stop_propagation, msg){
    return on
            (prevent_default,
             stop_propagation,
             cst_input,
             map_some(msg)([0, cst_target_value, string]));
   }
   function onchange(prevent_default, stop_propagation, msg){
    return on
            (prevent_default,
             stop_propagation,
             cst_change,
             map_some(msg)([0, cst_target_value$0, string]));
   }
   function onchange_index(prevent_default, stop_propagation, msg){
    return on
            (prevent_default,
             stop_propagation,
             cst_change$0,
             map_some(msg)([0, cst_target_selectedIndex, int$0]));
   }
   function onchange_checked(prevent_default, stop_propagation, msg){
    return on
            (prevent_default,
             stop_propagation,
             cst_click$1,
             map_some(msg)([0, cst_target_checked, bool]));
   }
   function onkeyevent(prevent_default, stop_propagation, type, msg){
    return on
            (prevent_default,
             stop_propagation,
             type,
             map_some(msg)(key_event));
   }
   function onkeyevent_cancel(stop_propagation, type, msg){
    return on_cancel(stop_propagation, type, map$0(msg, key_event));
   }
   function onkeydown(prevent_default, stop_propagation, msg){
    return onkeyevent(prevent_default, stop_propagation, cst_keydown, msg);
   }
   function onkeydown_cancel(stop_propagation, msg){
    return onkeyevent_cancel(stop_propagation, cst_keydown$0, msg);
   }
   function onkeyup(prevent_default, stop_propagation, msg){
    return onkeyevent(prevent_default, stop_propagation, cst_keyup, msg);
   }
   function onkeyup_cancel(stop_propagation, msg){
    return onkeyevent_cancel(stop_propagation, cst_keyup$0, msg);
   }
   function onpaste(prevent_default, stop_propagation, msg){
    return on
            (prevent_default,
             stop_propagation,
             cst_paste,
             map$0(msg, paste_event));
   }
   function oncustomevent(msg){return [2, [1, msg]];}
   function str_prop(k, v){return [0, k, [0, v]];}
   function int_prop(k, v){return [0, k, [1, v]];}
   function bool_prop(k, v){return [0, k, [3, v]];}
   function float_prop(k, v){return [0, k, [2, v]];}
   function style(k, v){return [1, k, v];}
   function attr(k, v){return [3, k, v];}
   function int_attr(k, v){return [3, k, caml_call1(Stdlib[33], v)];}
   function float_attr(k, v){return [3, k, caml_call1(Stdlib[35], v)];}
   function scroll_to_show(align_top){
    return bool_prop(cst_scroll_to_show, align_top);
   }
   var autofocus = bool_prop(cst_autofocus, 1);
   function autofocus_counter(x){return int_prop(cst_autofocus$0, x);}
   var
    autofocus_if_visible = str_prop(cst_autofocus$1, cst_if_visible),
    autosubmit = bool_prop(cst_autosubmit, 1),
    select = bool_prop(cst_select, 1);
   function class$0(x){return [0, cst_className, [0, x]];}
   function type(x){return [0, cst_type, [0, x]];}
   var type_button = type(cst_button);
   function value(x){return [0, cst_value, [0, x]];}
   function disabled(x){return [0, cst_disabled, [3, x]];}
   function add_class(x, attrs){
    function _B_(param){
     if(0 === param[0] && ! caml_string_notequal(param[1], cst_className$1))
      return 1;
     return 0;
    }
    var has_className = caml_call2(Stdlib_List[33], _B_, attrs);
    if(! has_className) return [0, class$0(x), attrs];
    function _C_(a){
     if(0 === a[0] && ! caml_string_notequal(a[1], cst_className$1)){
      var match = a[2];
      if(0 === match[0]){
       var s = match[1];
       return [0,
               cst_className$0,
               [0, caml_call3(Stdlib_Printf[4], _f_, s, x)]];
      }
     }
     return a;
    }
    return caml_call2(Stdlib_List[19], _C_, attrs);
   }
   function text(opt, txt){
    if(opt) var sth = opt[1], key = sth; else var key = cst_txt;
    return [0, key, txt];
   }
   function fragment(opt, children){
    if(opt) var sth = opt[1], key = sth; else var key = cst_fragment;
    return [1, key, children];
   }
   function elt(opt, tag, key, _A_, l){
    if(opt) var sth = opt[1], ns = sth; else var ns = cst;
    if(_A_) var sth$0 = _A_[1], a = sth$0; else var a = 0;
    if(key) var k = key[1], k$0 = k; else var k$0 = tag;
    return [2, k$0, ns, tag, a, l];
   }
   function svg_elt(tag, key, a, l){return elt([0, svg_ns], tag, key, a, l);}
   function div(key, a, l){return elt(0, cst_div, key, a, l);}
   function input(key, a, l){return elt(0, cst_input$0, key, a, l);}
   function txt_span(key, a, s){
    return elt(0, cst_span, key, a, [0, text(0, s), 0]);
   }
   function map_attr(f, x){
    switch(x[0]){
      case 2:
       var attributes = x[4], _w_ = x[5], _x_ = caml_call1(f, attributes);
       return [2, x[1], x[2], x[3], _x_, _w_];
      case 5:
       var attributes$0 = x[3], _y_ = x[4], _z_ = caml_call1(f, attributes$0);
       return [5, x[1], x[2], _z_, _y_];
      default: return x;
    }
   }
   function map$1(opt, f, child){
    if(opt) var sth = opt[1], key = sth; else var key = cst_map;
    return [3, key, f, child];
   }
   function memo(opt, f, arg){
    if(opt) var sth = opt[1], key = sth; else var key = cst_memo;
    return [4, key, f, arg];
   }
   function custom(opt, _v_, propagate_events, elt){
    if(opt) var sth = opt[1], key = sth; else var key = cst_custom;
    if(_v_) var sth$0 = _v_[1], a = sth$0; else var a = 0;
    return [5, key, elt, a, caml_equal(propagate_events, _g_)];
   }
   function return$0(opt, model){
    if(opt) var sth = opt[1], c = sth; else var c = 0;
    return [0, model, caml_call1(Cmd[6], c)];
   }
   function app$0(init, update, view, param){return [0, init, update, view];}
   function simple_app(init, update, view, param){
    function _u_(model, msg){
     return return$0(0, caml_call2(update, model, msg));
    }
    return [0, return$0(0, init), _u_, view];
   }
   function to_html(vdom){
    var b = caml_call1(Stdlib_Buffer[1], 654);
    function aux(param){
     var param$0 = param;
     for(;;)
      switch(param$0[0]){
        case 0:
         var txt = param$0[2]; return caml_call2(Stdlib_Buffer[16], b, txt);
        case 1:
         var children = param$0[2];
         return caml_call2(Stdlib_List[17], aux, children);
        case 2:
         var
          children$0 = param$0[5],
          attributes = param$0[4],
          tag = param$0[3],
          ns = param$0[2],
          _j_ =
            function(param, _s_){
             var styles = param[2], attrs = param[1];
             switch(_s_[0]){
               case 0:
                var value = _s_[2], name = _s_[1];
                switch(value[0]){
                  case 0:
                   var s = value[1], value$0 = s; break;
                  case 1:
                   var i = value[1], value$0 = caml_call1(Stdlib[33], i);
                   break;
                  case 2:
                   var
                    f = value[1],
                    s$0 = caml_call1(Stdlib[35], f),
                    l = [0, caml_ml_string_length(s$0)];
                   for(;;){
                    if(0 < l[1] && caml_string_get(s$0, l[1] - 1 | 0) === 46){l[1] += -1; continue;}
                    var
                     _t_ =
                       l[1] < caml_ml_string_length(s$0)
                        ? caml_call3(Stdlib_String[15], s$0, 0, l[1])
                        : s$0,
                     value$0 = _t_;
                    break;
                   }
                   break;
                  default:
                   var b = value[1], value$0 = caml_call1(Stdlib[30], b);
                }
                var
                 name$0 =
                   caml_string_notequal(name, cst_className$1)
                    ? name
                    : cst_class;
                return [0, [0, [0, name$0, value$0], attrs], styles];
               case 1:
                var value$1 = _s_[2], name$1 = _s_[1];
                return [0, attrs, [0, [0, name$1, value$1], styles]];
               case 2:
                return [0, attrs, styles];
               default:
                var value$2 = _s_[2], name$2 = _s_[1];
                return [0, [0, [0, name$2, value$2], attrs], styles];
             }
            },
          match = caml_call3(Stdlib_List[25], _j_, _h_, attributes),
          styles = match[2],
          attrs = match[1];
         if(styles)
          var
           _k_ =
             function(param){
              var
               x2 = param[2],
               x1 = param[1],
               _r_ = caml_call2(Stdlib[28], cst$0, x2);
              return caml_call2(Stdlib[28], x1, _r_);
             },
           _l_ = caml_call2(Stdlib_List[19], _k_, styles),
           styles$0 = caml_call1(caml_call1(Stdlib_String[6], cst$1), _l_),
           attrs$0 = [0, [0, cst_style, styles$0], attrs];
         else
          var attrs$0 = attrs;
         var
          attrs$1 = caml_call1(Stdlib_List[9], attrs$0),
          attrs$2 =
            runtime.caml_string_equal(ns, cst$5)
             ? attrs$1
             : [0, [0, cst_xmlns, ns], attrs$1],
          _m_ =
            function(param){
             var
              v = param[2],
              k = param[1],
              match = caml_call2(Stdlib_String[36], v, 34);
             if(match){
              var
               i0 = match[1],
               buf = caml_call1(Stdlib_Buffer[1], caml_ml_string_length(v));
              caml_call4(Stdlib_Buffer[18], buf, v, 0, i0);
              var _o_ = caml_ml_string_length(v) - 1 | 0;
              if(_o_ >= i0){
               var i = i0;
               for(;;){
                var u = caml_string_get(v, i);
                if(u === 34)
                 caml_call2(Stdlib_Buffer[16], buf, x);
                else
                 caml_call2(Stdlib_Buffer[12], buf, u);
                var _p_ = i + 1 | 0;
                if(_o_ !== i){var i = _p_; continue;}
                break;
               }
              }
              var _q_ = caml_call1(Stdlib_Buffer[2], buf);
             }
             else
              var _q_ = v;
             return caml_call3(Stdlib_Printf[4], _i_, k, _q_);
            },
          _n_ = caml_call2(Stdlib_List[19], _m_, attrs$2),
          attrs$3 = caml_call1(caml_call1(Stdlib_String[6], cst$2), _n_);
         caml_call2(Stdlib_Buffer[12], b, 60);
         caml_call2(Stdlib_Buffer[16], b, tag);
         if(caml_string_notequal(attrs$3, cst$5)){
          caml_call2(Stdlib_Buffer[12], b, 32);
          caml_call2(Stdlib_Buffer[16], b, attrs$3);
         }
         return 0 === children$0
                 ? caml_call2(Stdlib_Buffer[16], b, cst$3)
                 : (caml_call2
                    (Stdlib_Buffer[12], b, 62),
                   caml_call2(Stdlib_List[17], aux, children$0),
                   caml_call2(Stdlib_Buffer[16], b, cst$4),
                   caml_call2(Stdlib_Buffer[16], b, tag),
                   caml_call2(Stdlib_Buffer[12], b, 62));
        case 3:
         var child = param$0[3], param$0 = child; continue;
        case 4:
         var arg = param$0[3], f = param$0[2], param$0 = caml_call1(f, arg);
         continue;
        default: return 0;
      }
    }
    aux(vdom);
    return caml_call1(Stdlib_Buffer[2], b);
   }
   var
    Vdom =
      [0,
       Cmd,
       [0,
        field,
        method,
        app,
        bind$0,
        const$0,
        const$0,
        factor,
        map$0,
        map2,
        pair,
        fail,
        try$0,
        string,
        int$0,
        float$0,
        bool,
        unit,
        object,
        list,
        let$0,
        let$1,
        pair],
       Custom,
       on,
       on_with_options,
       on_js,
       on_js_with_options,
       onmousedown,
       onmousedown_cancel,
       onmouseup,
       onclick,
       onclick_cancel,
       ondblclick,
       oncontextmenu,
       onfocus,
       onblur,
       oninput,
       onchange_checked,
       onchange,
       onchange_index,
       onmousemove,
       onmouseenter,
       onmouseleave,
       onmouseover,
       onkeydown,
       onkeydown_cancel,
       onkeyup,
       onkeyup_cancel,
       onpaste,
       oncustomevent,
       str_prop,
       int_prop,
       bool_prop,
       float_prop,
       style,
       attr,
       int_attr,
       float_attr,
       class$0,
       type,
       type_button,
       value,
       disabled,
       add_class,
       scroll_to_show,
       autofocus,
       autofocus_if_visible,
       autofocus_counter,
       select,
       autosubmit,
       elt,
       svg_elt,
       text,
       fragment,
       map_attr,
       map$1,
       memo,
       custom,
       div,
       input,
       txt_span,
       return$0,
       app$0,
       simple_app,
       to_html];
   runtime.caml_register_global(104, Vdom, "Vdom");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
